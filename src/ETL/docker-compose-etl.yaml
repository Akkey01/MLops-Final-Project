version: '3.8'

services:
  extract-data:
    container_name: etl_extract_data
    image: python:3.11-slim
    user: root
    volumes:
      - blockdata:/data
    working_dir: /data
    command: 
      - bash
      - -c
      - |
        set -e

        apt update && apt install -y wget unzip tar

        mkdir -p raw/ami raw/libricss raw/meetingbank

        echo "Downloading AMI Corpus (~15GB)..."
        wget -O raw/ami/amicorpus.tgz http://groups.inf.ed.ac.uk/ami/AMICorpusMirror/amicorpus.tgz
        tar -xzf raw/ami/amicorpus.tgz -C raw/ami
        rm raw/ami/amicorpus.tgz

        echo "Downloading LibriCSS (~22GB)..."
        wget -O raw/libricss/LibriCSS.tgz https://www.openslr.org/resources/34/LibriCSS.tgz
        tar -xzf raw/libricss/LibriCSS.tgz -C raw/libricss
        rm raw/libricss/LibriCSS.tgz

        echo "Downloading MeetingBank (~2.5GB)..."
        wget -O raw/meetingbank/MeetingBank.zip https://zenodo.org/record/7280995/files/MeetingBank.zip?download=1
        unzip -q raw/meetingbank/MeetingBank.zip -d raw/meetingbank
        rm raw/meetingbank/MeetingBank.zip

        echo "All datasets downloaded and extracted."
        du -sh raw/*

  transform-data:
    container_name: etl_transform_data
    image: python:3.11
    volumes:
      - blockdata:/data
    working_dir: /data
    command:
      - bash
      - -c
      - |
        set -e
        pip install nltk

        mkdir -p processed

        python3 - << 'PYCODE'
import os, json

raw_root = "/data/raw"
out_f = open("/data/processed/all_meetings.jsonl","w", encoding="utf8")

corpora = {
    "ami": os.path.join(raw_root, "ami"),
    "libricss": os.path.join(raw_root, "libricss"),
    "meetingbank": os.path.join(raw_root, "meetingbank"),
}

for corpus, corpus_dir in corpora.items():
    for root,_,files in os.walk(corpus_dir):
        for f in files:
            if f.endswith((".txt", ".trs", ".json")):
                try:
                    path = os.path.join(root,f)
                    text = open(path, encoding="utf8", errors="ignore").read()
                    out_f.write(json.dumps({
                      "corpus": corpus,
                      "file": os.path.relpath(path, raw_root),
                      "text": text
                    }) + "\n")
                except:
                    continue
out_f.close()
print("Wrote", os.path.getsize("/data/processed/all_meetings.jsonl"), "bytes to processed/all_meetings.jsonl")
PYCODE

        echo "Processed files:"
        ls -lh processed

  load-data:
    container_name: etl_load_data
    image: rclone/rclone:latest
    volumes:
      - blockdata:/data
      - ~/.config/rclone/rclone.conf:/root/.config/rclone/rclone.conf:ro
    entrypoint: /bin/sh
    environment:
      - RCLONE_CONTAINER=meetings-project39
    command:
      - -c
      - |
        set -e
        if [ -z "$RCLONE_CONTAINER" ]; then
          echo "ERROR: RCLONE_CONTAINER not set"; exit 1
        fi

        echo "Uploading processed JSONLâ€¦"
        rclone copy /data/processed chi_tacc:$RCLONE_CONTAINER/processed \
          --transfers=16 --checkers=8 --fast-list --progress

        echo "Upload complete. Listing remote:"
        rclone lsd chi_tacc:$RCLONE_CONTAINER

volumes:
  blockdata:
    external: true
