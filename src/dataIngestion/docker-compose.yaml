version: "3.8"

volumes:
  whisper_model: {}
  extracted_audio: {}
  text_files: {}
  postgres_db: {}

services:
  # whisper-setup:
  #   build:
  #     context: .
  #     dockerfile: whisperModelDownloader.Dockerfile
  #   volumes:
  #     - whisper_model:/root/.cache/whisper
  #   command: >
  #     sh -c "python3 -c 'import whisper; whisper.load_model(\"large\")'"

  # multimedia-handler:
  #   build:
  #     context: .
  #     dockerfile: multimediaHandler.Dockerfile
  #   volumes:
  #     - whisper_model:/root/.cache/whisper
  #     - extracted_audio:/data/audio/files
  #     - text_files:/data/files
  #   depends_on:
  #     - whisper-setup

  backend:
    build:
      context: ../
      dockerfile: Dockerfile
    ports:
      - "8050:8000"
    environment:
      - MODEL_VERSION=stable

  backend-canary:
    build:
      context: ../
      dockerfile: Dockerfile
    ports:
      - "8051:8000"
    environment:
      - MODEL_VERSION=canary

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_db:/var/lib/postgresql/data

  redis:
    image: redis:latest

  # airflow-webserver:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.airflow
  #   depends_on:
  #     - postgres
  #     - redis
  #   environment:
  #     AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  #     AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  #     AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
  #     AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
  #     AIRFLOW__CORE__FERNET_KEY: ''
  #     AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
  #     AIRFLOW__WEBSERVER__BASE_URL: http://0.0.0.0:8080
  #     AIRFLOW__WEBSERVER__SECRET_KEY: your-consistent-secret-key
  #   volumes:
  #     - ./dags:/opt/airflow/dags
  #     - ./runner:/opt/airflow/runner
  #     - ./eval:/opt/airflow/eval
  #     - ./test_data:/opt/airflow/test_data
  #     - ../backend:/app/backend     
  #   ports:
  #     - "8080:8080"
  #   command: webserver

  # airflow-scheduler:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.airflow
  #   depends_on:
  #     - postgres
  #     - redis
  #   environment:
  #     AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  #     AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  #     AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
  #     AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
  #     AIRFLOW__CORE__FERNET_KEY: ''
  #     AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
  #     AIRFLOW__WEBSERVER__BASE_URL: http://0.0.0.0:8080
  #     AIRFLOW__WEBSERVER__SECRET_KEY: your-consistent-secret-key
  #   volumes:
  #     - ./dags:/opt/airflow/dags
  #     - ./runner:/opt/airflow/runner
  #     - ./eval:/opt/airflow/eval
  #     - ./test_data:/opt/airflow/test_data
  #     - ../backend:/app/backend     
  #   command: scheduler

  # airflow-init:
  #   image: apache/airflow:2.7.3
  #   depends_on:
  #     - postgres
  #     - redis
  #   environment:
  #     AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  #     AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  #     AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
  #     AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
  #     AIRFLOW__CORE__FERNET_KEY: ''
  #     AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
  #     AIRFLOW__WEBSERVER__SECRET_KEY: your-consistent-secret-key
  #   volumes:
  #     - ./dags:/opt/airflow/dags
  #     - ./runner:/opt/airflow/runner
  #     - ./eval:/opt/airflow/eval
  #     - ./test_data:/opt/airflow/test_data
  #     - ../backend:/app/backend     
  #   command: db init
  # airflow-worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.airflow
  #   depends_on:
  #     - redis
  #     - postgres
  #   environment:
  #     AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  #     AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  #     AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
  #     AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
  #     AIRFLOW__CORE__FERNET_KEY: ''
  #     AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
  #     AIRFLOW__WEBSERVER__SECRET_KEY: your-consistent-secret-key
  #   volumes:
  #     - ./dags:/opt/airflow/dags
  #     - ./runner:/opt/airflow/runner
  #     - ./eval:/opt/airflow/eval
  #     - ./test_data:/opt/airflow/test_data
  #   command: celery worker
